#include<stdio.h>
typedef char VertexType; 			
typedef int EdgeType; 				
#define MAXVEX 100 					
#define INFINITY 65535				
typedef struct
{
	VertexType vexs[MAXVEX]; 		
	EdgeType arc[MAXVEX][MAXVEX];	
	int numNodes, numEdges; 		
}MGraph;


//无向网图的邻接矩阵
void CreateMGraph(MGraph *G)
{
	int i,j,k,w;
	printf("输入顶点数和边数:\n");
	scanf("%d,%d",&G->numNodes,&G->numEdges); 		
		scanf(&G->vexs[i]);
	for(i = 0;i <G->numNodes;i++)
		for(j = 0;j <G->numNodes;j++)
			G->arc[i][j]=INFINITY;					
	for(k = 0;k <G->numEdges;k++) 					
	{
		printf("输入边(vi,vj)上的下标i，下标j和权w:\n");
		scanf("%d,%d,%d",&i,&j,&w); 			
		G->arc[i][j]=w; 
		G->arc[j][i]= G->arc[i][j]; 				
	}
}

typedef char VertexType; 	
typedef int EdgeType; 		

typedef struct EdgeNode 	
{
	int adjvex;    			
	EdgeType info;			
	struct EdgeNode *next; 	
}EdgeNode;

typedef struct VertexNode 	
{
	VertexType data; 		
	EdgeNode *firstedge;	
}VertexNode, AdjList[MAXVEX];

typedef struct
{
	AdjList adjList; 
	int numNodes,numEdges; 
}GraphAdjList;


//图的邻接表结构 
void  CreateALGraph(GraphAdjList *G)
{
	int i,j,k;
	EdgeNode *e;
	printf("输入顶点数和边数:\n");
	scanf("%d,%d",&G->numNodes,&G->numEdges); 	
	for(i = 0;i < G->numNodes;i++) 				
	{
		scanf(&G->adjList[i].data); 		
		G->adjList[i].firstedge=NULL; 		
	}
	
	for(k = 0;k < G->numEdges;k++)				
	{
		printf("输入边(vi,vj)上的顶点序号:\n");
		scanf("%d,%d",&i,&j); 					
		e=(EdgeNode *)malloc(sizeof(EdgeNode)); 
		e->adjvex=j;							      
		e->next=G->adjList[i].firstedge;		
		G->adjList[i].firstedge=e;				     
		e=(EdgeNode *)malloc(sizeof(EdgeNode));
		e->adjvex=i;							       
		e->next=G->adjList[j].firstedge;		
		G->adjList[j].firstedge=e;				          
	}
}
#define MAXVEX 9
Boolean visited[MAXVEX]; 				

// 邻接矩阵的深度优先递归算法
void DFS(MGraph G, int i)
{
	int j;
 	visited[i] = TRUE;
 	printf("%c ", G.vexs[i]);			
	for(j = 0; j < G.numVertexes; j++)
		if(G.arc[i][j] == 1 && !visited[j])
 			DFS(G, j);					
}

//邻接矩阵的深度遍历
void DFSTraverse(MGraph G)
{
	int i;
 	for(i = 0; i < G.numVertexes; i++)
 		visited[i] = FALSE; 			
	for(i = 0; i < G.numVertexes; i++)
 		if(!visited[i]) 				
			DFS(G, i);
}
//邻接表的深度优先递归算法
void DFS(GraphAdjList GL, int i)
{
	EdgeNode *p;
 	visited[i] = TRUE;
 	printf("%c ",GL->adjList[i].data);	
	p = GL->adjList[i].firstedge;
	while(p)
	{
 		if(!visited[p->adjvex])
 			DFS(GL, p->adjvex);			
		p = p->next;
 	}
}
// 邻接表的深度遍历操作 
void DFSTraverse(GraphAdjList GL)
{
	int i;
 	for(i = 0; i < GL->numVertexes; i++)
 		visited[i] = FALSE; 			
	for(i = 0; i < GL->numVertexes; i++)
 		if(!visited[i]) 				
			DFS(GL, i);
}


// 邻接矩阵的广度遍历算法
void BFSTraverse(MGraph G)
{
	int i, j;
	Queue Q;
	for(i = 0; i < G.numVertexes; i++)
       	visited[i] = FALSE;
    InitQueue(&Q);									
    for(i = 0; i < G.numVertexes; i++)  			
    {
		if (!visited[i])							
		{
			visited[i]=TRUE;						
			printf("%c ", G.vexs[i]);				
			EnQueue(&Q,i);							
			while(!QueueEmpty(Q))					
			{
				DeQueue(&Q,&i);						
				for(j=0;j<G.numVertexes;j++) 
				{ 																								
					if(G.arc[i][j] == 1 && !visited[j]) 
					{ 					
 						visited[j]=TRUE;			
						printf("%c ", G.vexs[j]);	
						EnQueue(&Q,j);				
					} 
				} 
			}
		}
	}
}

// 邻接表的广度遍历算法
void BFSTraverse(GraphAdjList GL)
{
	int i;
    EdgeNode *p;
	Queue Q;
	for(i = 0; i < GL->numVertexes; i++)
       	visited[i] = FALSE;
    InitQueue(&Q);
   	for(i = 0; i < GL->numVertexes; i++)
   	{
		if (!visited[i])
		{
			visited[i]=TRUE;
			printf("%c ",GL->adjList[i].data);	
			EnQueue(&Q,i);
			while(!QueueEmpty(Q))
			{
				DeQueue(&Q,&i);
				p = GL->adjList[i].firstedge;	
				while(p)
				{
					if(!visited[p->adjvex])		
 					{
 						visited[p->adjvex]=TRUE;
						printf("%c ",GL->adjList[p->adjvex].data);
						EnQueue(&Q,p->adjvex);	
					}
					p = p->next;				
				}
			}
		}
	}
}

// Prim算法生成最小生成树 
void MiniSpanTree_Prim(MGraph G)
{
	int min, i, j, k;
	int adjvex[MAXVEX];					
	int lowcost[MAXVEX];				
	lowcost[0] = 0;						
	adjvex[0] = 0;						
	for(i = 1; i < G.numVertexes; i++)	
	{
		lowcost[i] = G.arc[0][i];		
		adjvex[i] = 0;					
	}
	for(i = 1; i < G.numVertexes; i++)
	{
		min = INFINITY;					
		j = 1;k = 0;
		while(j < G.numVertexes)		
		{
			if(lowcost[j]!=0 && lowcost[j] < min)
			{							
				min = lowcost[j];		
				k = j;					
			}
			j++;
		}
		printf("(%d, %d)\n", adjvex[k], k);	
		lowcost[k] = 0;						
		for(j = 1; j < G.numVertexes; j++)	
		{	
			if(lowcost[j]!=0 && G.arc[k][j] < lowcost[j]) 
			{	
				lowcost[j] = G.arc[k][j];	
				adjvex[j] = k;				
			}
		}
	}
}

// 对边集数组Edge结构的定义 
typedef struct
{
	int begin;
	int end;
	int weight;
}Edge;   
// Kruskal算法生成最小生成树 
void MiniSpanTree_Kruskal(MGraph G)
{
	int i, n, m;
	Edge edges[MAXEDGE];
	int parent[MAXVEX];	
	for (i = 0; i < G.numVertexes; i++)
		parent[i] = 0;					
	for (i = 0; i < G.numEdges; i++)
	{
		n = Find(parent,edges[i].begin);
		m = Find(parent,edges[i].end);
		if (n != m)
		{
			parent[n] = m;
			printf("(%d, %d) %d\n", edges[i].begin, 
				edges[i].end, edges[i].weight);
		}
	}
}

// 查找连线顶点的尾部下标 
int Find(int *parent, int f)
{
	while ( parent[f] > 0)
	{
		f = parent[f];
	}
	return f;
}



#define MAXEDGE 20
#define MAXVEX 20
#define INFINITY 65535

typedef struct
{
	int vexs[MAXVEX];
	int arc[MAXVEX][MAXVEX];
	int numVertexes, numEdges;
}MGraph;

typedef int Patharc[MAXVEX];    	
typedef int ShortPathTable[MAXVEX];	

// Dijkstra算法，求有向网G的v0顶点到其余顶点v的最短路径P[v]及带权长度D[v]   
// P[v]的值为前驱顶点下标,D[v]表示v0到v的最短路径长度和 
void ShortestPath_Dijkstra(MGraph G, int v0, Patharc* P, ShortPathTable* D)
{
	int v, w, k, min;
	int final[MAXVEX];
	for (v = 0; v < G.numVertexes; v++)
	{
		final[v] = 0;
		(*D)[v] = G.arc[v0][v];
		(*P)[v] = -1;
	}

	(*D)[v0] = 0;
	final[v0] = 1;

	for (v = 1; v < G.numVertexes; v++)
	{
		min = INFINITY;
		for (w = 0; w < G.numVertexes; w++)
		{
			if (!final[w] && (*D)[w] < min)
			{
				k = w;
				min = (*D)[w];
			}
		}
		final[k] = 1;
		for (w = 0; w < G.numVertexes; w++)
		{

			if (!final[w] && (min + G.arc[k][w] < (*D)[w]))
			{
				(*D)[w] = min + G.arc[k][w];
				(*P)[w] = k;
			}
		}
	}
}
typedef int Patharc[MAXVEX][MAXVEX];
typedef int ShortPathTable[MAXVEX][MAXVEX];

//Floyd算法，求网图G中各顶点v到其余顶点w的最短路径P[v][w]及带权长度D[v][w]。  
void ShortestPath_Floyd(MGraph G, Patharc *P, ShortPathTable *D)
{    
	int v,w,k;    
	for(v=0; v<G.numVertexes; ++v) 		
	{        
		for(w=0; w<G.numVertexes; ++w)  
		{
			(*D)[v][w]=G.arc[v][w];		
			(*P)[v][w]=w;				
		}
	}
	for(k=0; k<G.numVertexes; ++k)   
	{
		for(v=0; v<G.numVertexes; ++v)  
		{        
			for(w=0; w<G.numVertexes; ++w)    
			{
				if ((*D)[v][w]>(*D)[v][k]+(*D)[k][w])
				{
					(*D)[v][w]=(*D)[v][k]+(*D)[k][w];
					(*P)[v][w]=(*P)[v][k];			
				}
			}
		}
	}
}
printf("各顶点间最短路径如下:\n");    
for(v=0; v<G.numVertexes; ++v)   
{        
	for(w=v+1; w<G.numVertexes; w++)  
	{
		printf("v%d-v%d weight: %d ",v,w,D[v][w]);
		k=P[v][w];				
		printf(" path: %d",v);	
		while(k!=w)				
		{
			printf(" -> %d",k);
			k=P[k][w];			
		}
		printf(" -> %d\n",w);	
	}
	printf("\n");
}
typedef struct EdgeNode 		
{
	int adjvex;    				
	int weight;					
	struct EdgeNode *next; 		
}EdgeNode;

typedef struct VertexNode 		
{
	int in;						
	int data; 					
	EdgeNode *firstedge;		
}VertexNode, AdjList[MAXVEX];

typedef struct
{
	AdjList adjList; 
	int numVertexes,numEdges; 	
}graphAdjList,*GraphAdjList;



//拓扑排序，若GL无回路，则输出拓扑排序序列并返回1，若有回路返回0。 
Status TopologicalSort(GraphAdjList GL)
{    
	EdgeNode *e;    
	int i,k,gettop;   
	int top=0;  								
	int count=0;									
	int *stack;									 
	stack=(int *)malloc(GL->numVertexes * sizeof(int) );    
	for(i = 0; i<GL->numVertexes; i++)                
		if(0 == GL->adjList[i].in) 					       
			stack[++top]=i;    
	while(top!=0)    
	{        
		gettop=stack[top--];       					
		printf("%d -> ",GL->adjList[gettop].data);     
		count++;        							        
		for(e = GL->adjList[gettop].firstedge; e; e = e->next)
		{            
			k=e->adjvex;            
			if( !(--GL->adjList[k].in) )  			              
				stack[++top]=k;        				
		}
	}   
	if(count < GL->numVertexes)  					    
		return ERROR;    
	else       
		return OK;
}


int *etv,*ltv; 
int *stack2;   
int top2;	  

// 拓扑排序 
Status TopologicalSort(GraphAdjList GL)
{  
	EdgeNode *e;    
	int i,k,gettop;   
	int top=0;  										
	int count=0;										
	int *stack;											
	stack=(int *)malloc(GL->numVertexes * sizeof(int) );    
	for(i = 0; i<GL->numVertexes; i++)                
		if(0 == GL->adjList[i].in) 						    
			stack[++top]=i;    
	top2=0;    											
	etv=(int *)malloc(GL->numVertexes * sizeof(int) ); 	
	for(i=0; i<GL->numVertexes; i++)        
		etv[i]=0;    									
	stack2=(int *)malloc(GL->numVertexes * sizeof(int) );
	while(top!=0)    
	{        
		gettop=stack[top--];        
		count++;        				
		stack2[++top2]=gettop;        	
		for(e = GL->adjList[gettop].firstedge; e; e = e->next)        
		{            
			k=e->adjvex;            
			if( !(--GL->adjList[k].in))                
				stack[++top]=k; 
			if((etv[gettop] + e->weight) > etv[k]) 
				etv[k] = etv[gettop] + e->weight;
		}    
	}    
	if(count < GL->numVertexes)        
		return ERROR;    
	else       
		return OK;
}


int *etv,*ltv; 
int *stack2;   
int top2;	 



//求关键路径,GL为有向网，输出G的各项关键活动 
void CriticalPath(GraphAdjList GL) 
{    
	EdgeNode *e;    
	int i,gettop,k,j;    
	int ete,lte;  			/       
	TopologicalSort(GL);   
	ltv=(int *)malloc(GL->numVertexes*sizeof(int));   
	for(i=0; i<GL->numVertexes; i++)        
		ltv[i]=etv[GL->numVertexes-1];    		       
	while(top2!=0)    							  
	{        
		gettop=stack2[top2--];        
		for(e = GL->adjList[gettop].firstedge; e; e = e->next)         
		{          
			k=e->adjvex;            
			if(ltv[k] - e->weight < ltv[gettop])              
				ltv[gettop] = ltv[k] - e->weight;        
		}   
	}    
	for(j=0; j<GL->numVertexes; j++)        	       
	{            
		for(e = GL->adjList[j].firstedge; e; e = e->next)            
		{                
			k=e->adjvex;                
			ete = etv[j];        				               
			lte = ltv[k] - e->weight; 			              
			if(ete == lte)    					                
				printf("<v%d - v%d> length: %d \n",
					GL->adjList[j].data,GL->adjList[k].data,e->weight);
		}        
	}
}
